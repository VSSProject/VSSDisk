/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Vss
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TFriendMessage : TBase
  {

    public string MessageID { get; set; }

    public string FromVssID { get; set; }

    public int ReadTimes { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TFriendOperate"/>
    /// </summary>
    public TFriendOperate Operate { get; set; }

    public int OperateTime { get; set; }

    public int LinkNum { get; set; }

    public TFriendMessage() {
    }

    public TFriendMessage(string MessageID, string FromVssID, int ReadTimes, TFriendOperate Operate, int OperateTime, int LinkNum) : this() {
      this.MessageID = MessageID;
      this.FromVssID = FromVssID;
      this.ReadTimes = ReadTimes;
      this.Operate = Operate;
      this.OperateTime = OperateTime;
      this.LinkNum = LinkNum;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_MessageID = false;
      bool isset_FromVssID = false;
      bool isset_ReadTimes = false;
      bool isset_Operate = false;
      bool isset_OperateTime = false;
      bool isset_LinkNum = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MessageID = iprot.ReadString();
              isset_MessageID = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              FromVssID = iprot.ReadString();
              isset_FromVssID = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ReadTimes = iprot.ReadI32();
              isset_ReadTimes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Operate = (TFriendOperate)iprot.ReadI32();
              isset_Operate = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              OperateTime = iprot.ReadI32();
              isset_OperateTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              LinkNum = iprot.ReadI32();
              isset_LinkNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_MessageID)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FromVssID)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ReadTimes)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Operate)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_OperateTime)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_LinkNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TFriendMessage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "MessageID";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(MessageID);
      oprot.WriteFieldEnd();
      field.Name = "FromVssID";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FromVssID);
      oprot.WriteFieldEnd();
      field.Name = "ReadTimes";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(ReadTimes);
      oprot.WriteFieldEnd();
      field.Name = "Operate";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Operate);
      oprot.WriteFieldEnd();
      field.Name = "OperateTime";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(OperateTime);
      oprot.WriteFieldEnd();
      field.Name = "LinkNum";
      field.Type = TType.I32;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(LinkNum);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TFriendMessage(");
      __sb.Append(", MessageID: ");
      __sb.Append(MessageID);
      __sb.Append(", FromVssID: ");
      __sb.Append(FromVssID);
      __sb.Append(", ReadTimes: ");
      __sb.Append(ReadTimes);
      __sb.Append(", Operate: ");
      __sb.Append(Operate);
      __sb.Append(", OperateTime: ");
      __sb.Append(OperateTime);
      __sb.Append(", LinkNum: ");
      __sb.Append(LinkNum);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

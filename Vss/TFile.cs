/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Vss
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TFile : TBase
  {

    public string FileId { get; set; }

    public byte[] FileContent { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TContentKind"/>
    /// </summary>
    public TContentKind FileKind { get; set; }

    public long FileSize { get; set; }

    public string FromApp { get; set; }

    public string FileInfo { get; set; }

    public string FileOwner { get; set; }

    public TFile() {
    }

    public TFile(string FileId, byte[] FileContent, TContentKind FileKind, long FileSize, string FromApp, string FileInfo, string FileOwner) : this() {
      this.FileId = FileId;
      this.FileContent = FileContent;
      this.FileKind = FileKind;
      this.FileSize = FileSize;
      this.FromApp = FromApp;
      this.FileInfo = FileInfo;
      this.FileOwner = FileOwner;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_FileId = false;
      bool isset_FileContent = false;
      bool isset_FileKind = false;
      bool isset_FileSize = false;
      bool isset_FromApp = false;
      bool isset_FileInfo = false;
      bool isset_FileOwner = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              FileId = iprot.ReadString();
              isset_FileId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              FileContent = iprot.ReadBinary();
              isset_FileContent = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              FileKind = (TContentKind)iprot.ReadI32();
              isset_FileKind = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              FileSize = iprot.ReadI64();
              isset_FileSize = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              FromApp = iprot.ReadString();
              isset_FromApp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              FileInfo = iprot.ReadString();
              isset_FileInfo = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              FileOwner = iprot.ReadString();
              isset_FileOwner = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_FileId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FileContent)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FileKind)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FileSize)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FromApp)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FileInfo)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FileOwner)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TFile");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "FileId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FileId);
      oprot.WriteFieldEnd();
      field.Name = "FileContent";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(FileContent);
      oprot.WriteFieldEnd();
      field.Name = "FileKind";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)FileKind);
      oprot.WriteFieldEnd();
      field.Name = "FileSize";
      field.Type = TType.I64;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(FileSize);
      oprot.WriteFieldEnd();
      field.Name = "FromApp";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FromApp);
      oprot.WriteFieldEnd();
      field.Name = "FileInfo";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FileInfo);
      oprot.WriteFieldEnd();
      field.Name = "FileOwner";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FileOwner);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TFile(");
      __sb.Append(", FileId: ");
      __sb.Append(FileId);
      __sb.Append(", FileContent: ");
      __sb.Append(FileContent);
      __sb.Append(", FileKind: ");
      __sb.Append(FileKind);
      __sb.Append(", FileSize: ");
      __sb.Append(FileSize);
      __sb.Append(", FromApp: ");
      __sb.Append(FromApp);
      __sb.Append(", FileInfo: ");
      __sb.Append(FileInfo);
      __sb.Append(", FileOwner: ");
      __sb.Append(FileOwner);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

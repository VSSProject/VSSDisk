/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Vss
{
  public partial class TVssService {
    public interface Iface {
      /// <summary>
      /// Get the list of TFile
      /// @return the list of TFile
      /// </summary>
      /// <param name="vssInfo"></param>
      List<string> GetMyOwnerFile(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetMyOwnerFile(AsyncCallback callback, object state, TValidator vssInfo);
      List<string> End_GetMyOwnerFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the User Number Informations.
      /// @return the User Information Number Structure.
      /// </summary>
      /// <param name="vssInfo"></param>
      TNumber GetNumber(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetNumber(AsyncCallback callback, object state, TValidator vssInfo);
      TNumber End_GetNumber(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the App User Info.
      /// @return the Content Of the Fid
      /// </summary>
      /// <param name="vssInfo"></param>
      string GetAppUserInfo(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo);
      string End_GetAppUserInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set the App User Info.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="userInfo"></param>
      TCommandResult PutAppUserInfo(TValidator vssInfo, string userInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_PutAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo, string userInfo);
      TCommandResult End_PutAppUserInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get A list of VssID Who are Provided the File.
      /// @fileID The FileID you want to get Providers.
      /// @return The List Of VssID.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      List<string> GetFileProvideList(TValidator vssInfo, string fileID);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFileProvideList(AsyncCallback callback, object state, TValidator vssInfo, string fileID);
      List<string> End_GetFileProvideList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get A list of Message that you provide to somebody.
      /// The Message is the Newest. And Get Max Number is MaxMessage.
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      List<TMessages> GetProvideItems(TValidator vssInfo, int MaxMessage);
      #if SILVERLIGHT
      IAsyncResult Begin_GetProvideItems(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage);
      List<TMessages> End_GetProvideItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get A list of Message. Who Provide to you.
      /// The Message is the Newest. And Get Max Number is MaxMessage.
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      List<TMessages> GetProvideMessage(TValidator vssInfo, int MaxMessage);
      #if SILVERLIGHT
      IAsyncResult Begin_GetProvideMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage);
      List<TMessages> End_GetProvideMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get A list of Message that the User publish
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="vssIDList"></param>
      /// <param name="MaxMessage"></param>
      List<TMessages> GetPublishMessage(TValidator vssInfo, List<string> vssIDList, int MaxMessage);
      #if SILVERLIGHT
      IAsyncResult Begin_GetPublishMessage(AsyncCallback callback, object state, TValidator vssInfo, List<string> vssIDList, int MaxMessage);
      List<TMessages> End_GetPublishMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Login the Vss system and check if the User has join the APP.
      /// @return the TLoginResult.
      /// </summary>
      /// <param name="vssInfo"></param>
      TLoginResult Login(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_Login(AsyncCallback callback, object state, TValidator vssInfo);
      TLoginResult End_Login(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Regist an New Vss User to the System.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      TCommandResult Regist(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_Regist(AsyncCallback callback, object state, TValidator vssInfo);
      TCommandResult End_Regist(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Put A Content
      /// If FileId == 0 Then Allow New row to place the File. Else Replace the old File!
      /// FromApp can be empty Because It can be get from vssInfo.
      /// @return the <Fid> of the Content
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileItem"></param>
      string Put(TValidator vssInfo, TFile fileItem);
      #if SILVERLIGHT
      IAsyncResult Begin_Put(AsyncCallback callback, object state, TValidator vssInfo, TFile fileItem);
      string End_Put(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get A Content
      /// @return the Content Of the Fid
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="Fid"></param>
      TFile Get(TValidator vssInfo, string Fid);
      #if SILVERLIGHT
      IAsyncResult Begin_Get(AsyncCallback callback, object state, TValidator vssInfo, string Fid);
      TFile End_Get(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete A Content
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      TCommandResult Del(TValidator vssInfo, string fileID);
      #if SILVERLIGHT
      IAsyncResult Begin_Del(AsyncCallback callback, object state, TValidator vssInfo, string fileID);
      TCommandResult End_Del(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Provide a Content to somebody
      /// If listFriendId.size == 0 Then Provide to All friends.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      /// <param name="listFriendId"></param>
      /// <param name="ProvideName"></param>
      TCommandResult Provide(TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName);
      #if SILVERLIGHT
      IAsyncResult Begin_Provide(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName);
      TCommandResult End_Provide(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Recover The Content From somebody
      /// If listFriendId.size == 0 Then Recover The File from All friends.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      /// <param name="listFriendId"></param>
      TCommandResult Recover(TValidator vssInfo, string fileID, List<string> listFriendId);
      #if SILVERLIGHT
      IAsyncResult Begin_Recover(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId);
      TCommandResult End_Recover(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a FileTree file with Json format
      /// @return A Json format string which is the File Tree.
      /// </summary>
      /// <param name="vssInfo"></param>
      string GetFileTree(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFileTree(AsyncCallback callback, object state, TValidator vssInfo);
      string End_GetFileTree(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Save The FileTree file with Json format
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileTree"></param>
      TCommandResult SaveFileTree(TValidator vssInfo, string fileTree);
      #if SILVERLIGHT
      IAsyncResult Begin_SaveFileTree(AsyncCallback callback, object state, TValidator vssInfo, string fileTree);
      TCommandResult End_SaveFileTree(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of Friends VssId. Each is focus or followed.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      List<string> GetFriend(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriend(AsyncCallback callback, object state, TValidator vssInfo);
      List<string> End_GetFriend(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of Follow you VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      List<string> GetFollow(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFollow(AsyncCallback callback, object state, TValidator vssInfo);
      List<string> End_GetFollow(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of Who you focus.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      List<string> GetFocus(TValidator vssInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFocus(AsyncCallback callback, object state, TValidator vssInfo);
      List<string> End_GetFocus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Del a list of Focus VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="delFriends"></param>
      TCommandResult DelFocus(TValidator vssInfo, List<string> delFriends);
      #if SILVERLIGHT
      IAsyncResult Begin_DelFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> delFriends);
      TCommandResult End_DelFocus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Add a list of Focus VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="addFriends"></param>
      TCommandResult AddFocus(TValidator vssInfo, List<string> addFriends);
      #if SILVERLIGHT
      IAsyncResult Begin_AddFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> addFriends);
      TCommandResult End_AddFocus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a List of Friend Message
      /// @MaxMessage Max Return Number
      /// @return the List of Friend Message
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      List<TFriendMessage> GetFriendMessage(TValidator vssInfo, int MaxMessage);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage);
      List<TFriendMessage> End_GetFriendMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete A single Friend Message.
      /// @MessageID MessageID which you want to delete.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MessageID"></param>
      TCommandResult DelFriendMessage(TValidator vssInfo, string MessageID);
      #if SILVERLIGHT
      IAsyncResult Begin_DelFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, string MessageID);
      TCommandResult End_DelFriendMessage(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMyOwnerFile(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetMyOwnerFile(callback, state, vssInfo);
      }

      public List<string> End_GetMyOwnerFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMyOwnerFile();
      }

      #endif

      /// <summary>
      /// Get the list of TFile
      /// @return the list of TFile
      /// </summary>
      /// <param name="vssInfo"></param>
      public List<string> GetMyOwnerFile(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetMyOwnerFile(vssInfo);
        return recv_GetMyOwnerFile();

        #else
        var asyncResult = Begin_GetMyOwnerFile(null, null, vssInfo);
        return End_GetMyOwnerFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMyOwnerFile(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetMyOwnerFile(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMyOwnerFile", TMessageType.Call, seqid_));
        GetMyOwnerFile_args args = new GetMyOwnerFile_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetMyOwnerFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMyOwnerFile_result result = new GetMyOwnerFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMyOwnerFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNumber(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetNumber(callback, state, vssInfo);
      }

      public TNumber End_GetNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNumber();
      }

      #endif

      /// <summary>
      /// Get the User Number Informations.
      /// @return the User Information Number Structure.
      /// </summary>
      /// <param name="vssInfo"></param>
      public TNumber GetNumber(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetNumber(vssInfo);
        return recv_GetNumber();

        #else
        var asyncResult = Begin_GetNumber(null, null, vssInfo);
        return End_GetNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNumber(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetNumber(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNumber", TMessageType.Call, seqid_));
        GetNumber_args args = new GetNumber_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TNumber recv_GetNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNumber_result result = new GetNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNumber failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetAppUserInfo(callback, state, vssInfo);
      }

      public string End_GetAppUserInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAppUserInfo();
      }

      #endif

      /// <summary>
      /// Get the App User Info.
      /// @return the Content Of the Fid
      /// </summary>
      /// <param name="vssInfo"></param>
      public string GetAppUserInfo(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetAppUserInfo(vssInfo);
        return recv_GetAppUserInfo();

        #else
        var asyncResult = Begin_GetAppUserInfo(null, null, vssInfo);
        return End_GetAppUserInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetAppUserInfo(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAppUserInfo", TMessageType.Call, seqid_));
        GetAppUserInfo_args args = new GetAppUserInfo_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetAppUserInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAppUserInfo_result result = new GetAppUserInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAppUserInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PutAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo, string userInfo)
      {
        return send_PutAppUserInfo(callback, state, vssInfo, userInfo);
      }

      public TCommandResult End_PutAppUserInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PutAppUserInfo();
      }

      #endif

      /// <summary>
      /// Set the App User Info.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="userInfo"></param>
      public TCommandResult PutAppUserInfo(TValidator vssInfo, string userInfo)
      {
        #if !SILVERLIGHT
        send_PutAppUserInfo(vssInfo, userInfo);
        return recv_PutAppUserInfo();

        #else
        var asyncResult = Begin_PutAppUserInfo(null, null, vssInfo, userInfo);
        return End_PutAppUserInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PutAppUserInfo(AsyncCallback callback, object state, TValidator vssInfo, string userInfo)
      #else
      public void send_PutAppUserInfo(TValidator vssInfo, string userInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PutAppUserInfo", TMessageType.Call, seqid_));
        PutAppUserInfo_args args = new PutAppUserInfo_args();
        args.VssInfo = vssInfo;
        args.UserInfo = userInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_PutAppUserInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PutAppUserInfo_result result = new PutAppUserInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PutAppUserInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFileProvideList(AsyncCallback callback, object state, TValidator vssInfo, string fileID)
      {
        return send_GetFileProvideList(callback, state, vssInfo, fileID);
      }

      public List<string> End_GetFileProvideList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFileProvideList();
      }

      #endif

      /// <summary>
      /// Get A list of VssID Who are Provided the File.
      /// @fileID The FileID you want to get Providers.
      /// @return The List Of VssID.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      public List<string> GetFileProvideList(TValidator vssInfo, string fileID)
      {
        #if !SILVERLIGHT
        send_GetFileProvideList(vssInfo, fileID);
        return recv_GetFileProvideList();

        #else
        var asyncResult = Begin_GetFileProvideList(null, null, vssInfo, fileID);
        return End_GetFileProvideList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFileProvideList(AsyncCallback callback, object state, TValidator vssInfo, string fileID)
      #else
      public void send_GetFileProvideList(TValidator vssInfo, string fileID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFileProvideList", TMessageType.Call, seqid_));
        GetFileProvideList_args args = new GetFileProvideList_args();
        args.VssInfo = vssInfo;
        args.FileID = fileID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetFileProvideList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFileProvideList_result result = new GetFileProvideList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFileProvideList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetProvideItems(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      {
        return send_GetProvideItems(callback, state, vssInfo, MaxMessage);
      }

      public List<TMessages> End_GetProvideItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetProvideItems();
      }

      #endif

      /// <summary>
      /// Get A list of Message that you provide to somebody.
      /// The Message is the Newest. And Get Max Number is MaxMessage.
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      public List<TMessages> GetProvideItems(TValidator vssInfo, int MaxMessage)
      {
        #if !SILVERLIGHT
        send_GetProvideItems(vssInfo, MaxMessage);
        return recv_GetProvideItems();

        #else
        var asyncResult = Begin_GetProvideItems(null, null, vssInfo, MaxMessage);
        return End_GetProvideItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetProvideItems(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      #else
      public void send_GetProvideItems(TValidator vssInfo, int MaxMessage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetProvideItems", TMessageType.Call, seqid_));
        GetProvideItems_args args = new GetProvideItems_args();
        args.VssInfo = vssInfo;
        args.MaxMessage = MaxMessage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TMessages> recv_GetProvideItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetProvideItems_result result = new GetProvideItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProvideItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetProvideMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      {
        return send_GetProvideMessage(callback, state, vssInfo, MaxMessage);
      }

      public List<TMessages> End_GetProvideMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetProvideMessage();
      }

      #endif

      /// <summary>
      /// Get A list of Message. Who Provide to you.
      /// The Message is the Newest. And Get Max Number is MaxMessage.
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      public List<TMessages> GetProvideMessage(TValidator vssInfo, int MaxMessage)
      {
        #if !SILVERLIGHT
        send_GetProvideMessage(vssInfo, MaxMessage);
        return recv_GetProvideMessage();

        #else
        var asyncResult = Begin_GetProvideMessage(null, null, vssInfo, MaxMessage);
        return End_GetProvideMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetProvideMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      #else
      public void send_GetProvideMessage(TValidator vssInfo, int MaxMessage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetProvideMessage", TMessageType.Call, seqid_));
        GetProvideMessage_args args = new GetProvideMessage_args();
        args.VssInfo = vssInfo;
        args.MaxMessage = MaxMessage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TMessages> recv_GetProvideMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetProvideMessage_result result = new GetProvideMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProvideMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPublishMessage(AsyncCallback callback, object state, TValidator vssInfo, List<string> vssIDList, int MaxMessage)
      {
        return send_GetPublishMessage(callback, state, vssInfo, vssIDList, MaxMessage);
      }

      public List<TMessages> End_GetPublishMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPublishMessage();
      }

      #endif

      /// <summary>
      /// Get A list of Message that the User publish
      /// @return The List Of TMessages.
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="vssIDList"></param>
      /// <param name="MaxMessage"></param>
      public List<TMessages> GetPublishMessage(TValidator vssInfo, List<string> vssIDList, int MaxMessage)
      {
        #if !SILVERLIGHT
        send_GetPublishMessage(vssInfo, vssIDList, MaxMessage);
        return recv_GetPublishMessage();

        #else
        var asyncResult = Begin_GetPublishMessage(null, null, vssInfo, vssIDList, MaxMessage);
        return End_GetPublishMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPublishMessage(AsyncCallback callback, object state, TValidator vssInfo, List<string> vssIDList, int MaxMessage)
      #else
      public void send_GetPublishMessage(TValidator vssInfo, List<string> vssIDList, int MaxMessage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPublishMessage", TMessageType.Call, seqid_));
        GetPublishMessage_args args = new GetPublishMessage_args();
        args.VssInfo = vssInfo;
        args.VssIDList = vssIDList;
        args.MaxMessage = MaxMessage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TMessages> recv_GetPublishMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPublishMessage_result result = new GetPublishMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPublishMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Login(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_Login(callback, state, vssInfo);
      }

      public TLoginResult End_Login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Login();
      }

      #endif

      /// <summary>
      /// Login the Vss system and check if the User has join the APP.
      /// @return the TLoginResult.
      /// </summary>
      /// <param name="vssInfo"></param>
      public TLoginResult Login(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_Login(vssInfo);
        return recv_Login();

        #else
        var asyncResult = Begin_Login(null, null, vssInfo);
        return End_Login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Login(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_Login(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TLoginResult recv_Login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Login_result result = new Login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Regist(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_Regist(callback, state, vssInfo);
      }

      public TCommandResult End_Regist(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Regist();
      }

      #endif

      /// <summary>
      /// Regist an New Vss User to the System.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      public TCommandResult Regist(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_Regist(vssInfo);
        return recv_Regist();

        #else
        var asyncResult = Begin_Regist(null, null, vssInfo);
        return End_Regist(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Regist(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_Regist(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Regist", TMessageType.Call, seqid_));
        Regist_args args = new Regist_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_Regist()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Regist_result result = new Regist_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Regist failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Put(AsyncCallback callback, object state, TValidator vssInfo, TFile fileItem)
      {
        return send_Put(callback, state, vssInfo, fileItem);
      }

      public string End_Put(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Put();
      }

      #endif

      /// <summary>
      /// Put A Content
      /// If FileId == 0 Then Allow New row to place the File. Else Replace the old File!
      /// FromApp can be empty Because It can be get from vssInfo.
      /// @return the <Fid> of the Content
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileItem"></param>
      public string Put(TValidator vssInfo, TFile fileItem)
      {
        #if !SILVERLIGHT
        send_Put(vssInfo, fileItem);
        return recv_Put();

        #else
        var asyncResult = Begin_Put(null, null, vssInfo, fileItem);
        return End_Put(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Put(AsyncCallback callback, object state, TValidator vssInfo, TFile fileItem)
      #else
      public void send_Put(TValidator vssInfo, TFile fileItem)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Put", TMessageType.Call, seqid_));
        Put_args args = new Put_args();
        args.VssInfo = vssInfo;
        args.FileItem = fileItem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Put()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Put_result result = new Put_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Put failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Get(AsyncCallback callback, object state, TValidator vssInfo, string Fid)
      {
        return send_Get(callback, state, vssInfo, Fid);
      }

      public TFile End_Get(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Get();
      }

      #endif

      /// <summary>
      /// Get A Content
      /// @return the Content Of the Fid
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="Fid"></param>
      public TFile Get(TValidator vssInfo, string Fid)
      {
        #if !SILVERLIGHT
        send_Get(vssInfo, Fid);
        return recv_Get();

        #else
        var asyncResult = Begin_Get(null, null, vssInfo, Fid);
        return End_Get(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Get(AsyncCallback callback, object state, TValidator vssInfo, string Fid)
      #else
      public void send_Get(TValidator vssInfo, string Fid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Get", TMessageType.Call, seqid_));
        Get_args args = new Get_args();
        args.VssInfo = vssInfo;
        args.Fid = Fid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TFile recv_Get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Get_result result = new Get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Get failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Del(AsyncCallback callback, object state, TValidator vssInfo, string fileID)
      {
        return send_Del(callback, state, vssInfo, fileID);
      }

      public TCommandResult End_Del(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Del();
      }

      #endif

      /// <summary>
      /// Delete A Content
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      public TCommandResult Del(TValidator vssInfo, string fileID)
      {
        #if !SILVERLIGHT
        send_Del(vssInfo, fileID);
        return recv_Del();

        #else
        var asyncResult = Begin_Del(null, null, vssInfo, fileID);
        return End_Del(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Del(AsyncCallback callback, object state, TValidator vssInfo, string fileID)
      #else
      public void send_Del(TValidator vssInfo, string fileID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Del", TMessageType.Call, seqid_));
        Del_args args = new Del_args();
        args.VssInfo = vssInfo;
        args.FileID = fileID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_Del()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Del_result result = new Del_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Del failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Provide(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName)
      {
        return send_Provide(callback, state, vssInfo, fileID, listFriendId, ProvideName);
      }

      public TCommandResult End_Provide(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Provide();
      }

      #endif

      /// <summary>
      /// Provide a Content to somebody
      /// If listFriendId.size == 0 Then Provide to All friends.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      /// <param name="listFriendId"></param>
      /// <param name="ProvideName"></param>
      public TCommandResult Provide(TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName)
      {
        #if !SILVERLIGHT
        send_Provide(vssInfo, fileID, listFriendId, ProvideName);
        return recv_Provide();

        #else
        var asyncResult = Begin_Provide(null, null, vssInfo, fileID, listFriendId, ProvideName);
        return End_Provide(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Provide(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName)
      #else
      public void send_Provide(TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Provide", TMessageType.Call, seqid_));
        Provide_args args = new Provide_args();
        args.VssInfo = vssInfo;
        args.FileID = fileID;
        args.ListFriendId = listFriendId;
        args.ProvideName = ProvideName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_Provide()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Provide_result result = new Provide_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Provide failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Recover(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId)
      {
        return send_Recover(callback, state, vssInfo, fileID, listFriendId);
      }

      public TCommandResult End_Recover(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Recover();
      }

      #endif

      /// <summary>
      /// Recover The Content From somebody
      /// If listFriendId.size == 0 Then Recover The File from All friends.
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileID"></param>
      /// <param name="listFriendId"></param>
      public TCommandResult Recover(TValidator vssInfo, string fileID, List<string> listFriendId)
      {
        #if !SILVERLIGHT
        send_Recover(vssInfo, fileID, listFriendId);
        return recv_Recover();

        #else
        var asyncResult = Begin_Recover(null, null, vssInfo, fileID, listFriendId);
        return End_Recover(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Recover(AsyncCallback callback, object state, TValidator vssInfo, string fileID, List<string> listFriendId)
      #else
      public void send_Recover(TValidator vssInfo, string fileID, List<string> listFriendId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Recover", TMessageType.Call, seqid_));
        Recover_args args = new Recover_args();
        args.VssInfo = vssInfo;
        args.FileID = fileID;
        args.ListFriendId = listFriendId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_Recover()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Recover_result result = new Recover_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Recover failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFileTree(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetFileTree(callback, state, vssInfo);
      }

      public string End_GetFileTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFileTree();
      }

      #endif

      /// <summary>
      /// Get a FileTree file with Json format
      /// @return A Json format string which is the File Tree.
      /// </summary>
      /// <param name="vssInfo"></param>
      public string GetFileTree(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetFileTree(vssInfo);
        return recv_GetFileTree();

        #else
        var asyncResult = Begin_GetFileTree(null, null, vssInfo);
        return End_GetFileTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFileTree(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetFileTree(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFileTree", TMessageType.Call, seqid_));
        GetFileTree_args args = new GetFileTree_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFileTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFileTree_result result = new GetFileTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFileTree failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SaveFileTree(AsyncCallback callback, object state, TValidator vssInfo, string fileTree)
      {
        return send_SaveFileTree(callback, state, vssInfo, fileTree);
      }

      public TCommandResult End_SaveFileTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SaveFileTree();
      }

      #endif

      /// <summary>
      /// Save The FileTree file with Json format
      /// @return the State of Command <TCommandResult>
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="fileTree"></param>
      public TCommandResult SaveFileTree(TValidator vssInfo, string fileTree)
      {
        #if !SILVERLIGHT
        send_SaveFileTree(vssInfo, fileTree);
        return recv_SaveFileTree();

        #else
        var asyncResult = Begin_SaveFileTree(null, null, vssInfo, fileTree);
        return End_SaveFileTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SaveFileTree(AsyncCallback callback, object state, TValidator vssInfo, string fileTree)
      #else
      public void send_SaveFileTree(TValidator vssInfo, string fileTree)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SaveFileTree", TMessageType.Call, seqid_));
        SaveFileTree_args args = new SaveFileTree_args();
        args.VssInfo = vssInfo;
        args.FileTree = fileTree;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_SaveFileTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SaveFileTree_result result = new SaveFileTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveFileTree failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriend(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetFriend(callback, state, vssInfo);
      }

      public List<string> End_GetFriend(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriend();
      }

      #endif

      /// <summary>
      /// Get a list of Friends VssId. Each is focus or followed.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      public List<string> GetFriend(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetFriend(vssInfo);
        return recv_GetFriend();

        #else
        var asyncResult = Begin_GetFriend(null, null, vssInfo);
        return End_GetFriend(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriend(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetFriend(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriend", TMessageType.Call, seqid_));
        GetFriend_args args = new GetFriend_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriend_result result = new GetFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriend failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFollow(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetFollow(callback, state, vssInfo);
      }

      public List<string> End_GetFollow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFollow();
      }

      #endif

      /// <summary>
      /// Get a list of Follow you VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      public List<string> GetFollow(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetFollow(vssInfo);
        return recv_GetFollow();

        #else
        var asyncResult = Begin_GetFollow(null, null, vssInfo);
        return End_GetFollow(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFollow(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetFollow(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFollow", TMessageType.Call, seqid_));
        GetFollow_args args = new GetFollow_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetFollow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFollow_result result = new GetFollow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFollow failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFocus(AsyncCallback callback, object state, TValidator vssInfo)
      {
        return send_GetFocus(callback, state, vssInfo);
      }

      public List<string> End_GetFocus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFocus();
      }

      #endif

      /// <summary>
      /// Get a list of Who you focus.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      public List<string> GetFocus(TValidator vssInfo)
      {
        #if !SILVERLIGHT
        send_GetFocus(vssInfo);
        return recv_GetFocus();

        #else
        var asyncResult = Begin_GetFocus(null, null, vssInfo);
        return End_GetFocus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFocus(AsyncCallback callback, object state, TValidator vssInfo)
      #else
      public void send_GetFocus(TValidator vssInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFocus", TMessageType.Call, seqid_));
        GetFocus_args args = new GetFocus_args();
        args.VssInfo = vssInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetFocus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFocus_result result = new GetFocus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFocus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DelFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> delFriends)
      {
        return send_DelFocus(callback, state, vssInfo, delFriends);
      }

      public TCommandResult End_DelFocus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DelFocus();
      }

      #endif

      /// <summary>
      /// Del a list of Focus VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="delFriends"></param>
      public TCommandResult DelFocus(TValidator vssInfo, List<string> delFriends)
      {
        #if !SILVERLIGHT
        send_DelFocus(vssInfo, delFriends);
        return recv_DelFocus();

        #else
        var asyncResult = Begin_DelFocus(null, null, vssInfo, delFriends);
        return End_DelFocus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DelFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> delFriends)
      #else
      public void send_DelFocus(TValidator vssInfo, List<string> delFriends)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DelFocus", TMessageType.Call, seqid_));
        DelFocus_args args = new DelFocus_args();
        args.VssInfo = vssInfo;
        args.DelFriends = delFriends;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_DelFocus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DelFocus_result result = new DelFocus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFocus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> addFriends)
      {
        return send_AddFocus(callback, state, vssInfo, addFriends);
      }

      public TCommandResult End_AddFocus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddFocus();
      }

      #endif

      /// <summary>
      /// Add a list of Focus VssId
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="addFriends"></param>
      public TCommandResult AddFocus(TValidator vssInfo, List<string> addFriends)
      {
        #if !SILVERLIGHT
        send_AddFocus(vssInfo, addFriends);
        return recv_AddFocus();

        #else
        var asyncResult = Begin_AddFocus(null, null, vssInfo, addFriends);
        return End_AddFocus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddFocus(AsyncCallback callback, object state, TValidator vssInfo, List<string> addFriends)
      #else
      public void send_AddFocus(TValidator vssInfo, List<string> addFriends)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddFocus", TMessageType.Call, seqid_));
        AddFocus_args args = new AddFocus_args();
        args.VssInfo = vssInfo;
        args.AddFriends = addFriends;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_AddFocus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddFocus_result result = new AddFocus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFocus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      {
        return send_GetFriendMessage(callback, state, vssInfo, MaxMessage);
      }

      public List<TFriendMessage> End_GetFriendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriendMessage();
      }

      #endif

      /// <summary>
      /// Get a List of Friend Message
      /// @MaxMessage Max Return Number
      /// @return the List of Friend Message
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MaxMessage"></param>
      public List<TFriendMessage> GetFriendMessage(TValidator vssInfo, int MaxMessage)
      {
        #if !SILVERLIGHT
        send_GetFriendMessage(vssInfo, MaxMessage);
        return recv_GetFriendMessage();

        #else
        var asyncResult = Begin_GetFriendMessage(null, null, vssInfo, MaxMessage);
        return End_GetFriendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, int MaxMessage)
      #else
      public void send_GetFriendMessage(TValidator vssInfo, int MaxMessage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriendMessage", TMessageType.Call, seqid_));
        GetFriendMessage_args args = new GetFriendMessage_args();
        args.VssInfo = vssInfo;
        args.MaxMessage = MaxMessage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TFriendMessage> recv_GetFriendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriendMessage_result result = new GetFriendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriendMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DelFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, string MessageID)
      {
        return send_DelFriendMessage(callback, state, vssInfo, MessageID);
      }

      public TCommandResult End_DelFriendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DelFriendMessage();
      }

      #endif

      /// <summary>
      /// Delete A single Friend Message.
      /// @MessageID MessageID which you want to delete.
      /// @return the List of VssId
      /// </summary>
      /// <param name="vssInfo"></param>
      /// <param name="MessageID"></param>
      public TCommandResult DelFriendMessage(TValidator vssInfo, string MessageID)
      {
        #if !SILVERLIGHT
        send_DelFriendMessage(vssInfo, MessageID);
        return recv_DelFriendMessage();

        #else
        var asyncResult = Begin_DelFriendMessage(null, null, vssInfo, MessageID);
        return End_DelFriendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DelFriendMessage(AsyncCallback callback, object state, TValidator vssInfo, string MessageID)
      #else
      public void send_DelFriendMessage(TValidator vssInfo, string MessageID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DelFriendMessage", TMessageType.Call, seqid_));
        DelFriendMessage_args args = new DelFriendMessage_args();
        args.VssInfo = vssInfo;
        args.MessageID = MessageID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCommandResult recv_DelFriendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DelFriendMessage_result result = new DelFriendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFriendMessage failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetMyOwnerFile"] = GetMyOwnerFile_Process;
        processMap_["GetNumber"] = GetNumber_Process;
        processMap_["GetAppUserInfo"] = GetAppUserInfo_Process;
        processMap_["PutAppUserInfo"] = PutAppUserInfo_Process;
        processMap_["GetFileProvideList"] = GetFileProvideList_Process;
        processMap_["GetProvideItems"] = GetProvideItems_Process;
        processMap_["GetProvideMessage"] = GetProvideMessage_Process;
        processMap_["GetPublishMessage"] = GetPublishMessage_Process;
        processMap_["Login"] = Login_Process;
        processMap_["Regist"] = Regist_Process;
        processMap_["Put"] = Put_Process;
        processMap_["Get"] = Get_Process;
        processMap_["Del"] = Del_Process;
        processMap_["Provide"] = Provide_Process;
        processMap_["Recover"] = Recover_Process;
        processMap_["GetFileTree"] = GetFileTree_Process;
        processMap_["SaveFileTree"] = SaveFileTree_Process;
        processMap_["GetFriend"] = GetFriend_Process;
        processMap_["GetFollow"] = GetFollow_Process;
        processMap_["GetFocus"] = GetFocus_Process;
        processMap_["DelFocus"] = DelFocus_Process;
        processMap_["AddFocus"] = AddFocus_Process;
        processMap_["GetFriendMessage"] = GetFriendMessage_Process;
        processMap_["DelFriendMessage"] = DelFriendMessage_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetMyOwnerFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMyOwnerFile_args args = new GetMyOwnerFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMyOwnerFile_result result = new GetMyOwnerFile_result();
        result.Success = iface_.GetMyOwnerFile(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetMyOwnerFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNumber_args args = new GetNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNumber_result result = new GetNumber_result();
        result.Success = iface_.GetNumber(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAppUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAppUserInfo_args args = new GetAppUserInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAppUserInfo_result result = new GetAppUserInfo_result();
        result.Success = iface_.GetAppUserInfo(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetAppUserInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PutAppUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PutAppUserInfo_args args = new PutAppUserInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PutAppUserInfo_result result = new PutAppUserInfo_result();
        result.Success = iface_.PutAppUserInfo(args.VssInfo, args.UserInfo);
        oprot.WriteMessageBegin(new TMessage("PutAppUserInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFileProvideList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFileProvideList_args args = new GetFileProvideList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFileProvideList_result result = new GetFileProvideList_result();
        result.Success = iface_.GetFileProvideList(args.VssInfo, args.FileID);
        oprot.WriteMessageBegin(new TMessage("GetFileProvideList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetProvideItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetProvideItems_args args = new GetProvideItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetProvideItems_result result = new GetProvideItems_result();
        result.Success = iface_.GetProvideItems(args.VssInfo, args.MaxMessage);
        oprot.WriteMessageBegin(new TMessage("GetProvideItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetProvideMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetProvideMessage_args args = new GetProvideMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetProvideMessage_result result = new GetProvideMessage_result();
        result.Success = iface_.GetProvideMessage(args.VssInfo, args.MaxMessage);
        oprot.WriteMessageBegin(new TMessage("GetProvideMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPublishMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPublishMessage_args args = new GetPublishMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPublishMessage_result result = new GetPublishMessage_result();
        result.Success = iface_.GetPublishMessage(args.VssInfo, args.VssIDList, args.MaxMessage);
        oprot.WriteMessageBegin(new TMessage("GetPublishMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Login_args args = new Login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Login_result result = new Login_result();
        result.Success = iface_.Login(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Regist_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Regist_args args = new Regist_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Regist_result result = new Regist_result();
        result.Success = iface_.Regist(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("Regist", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Put_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Put_args args = new Put_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Put_result result = new Put_result();
        result.Success = iface_.Put(args.VssInfo, args.FileItem);
        oprot.WriteMessageBegin(new TMessage("Put", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Get_args args = new Get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Get_result result = new Get_result();
        result.Success = iface_.Get(args.VssInfo, args.Fid);
        oprot.WriteMessageBegin(new TMessage("Get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Del_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Del_args args = new Del_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Del_result result = new Del_result();
        result.Success = iface_.Del(args.VssInfo, args.FileID);
        oprot.WriteMessageBegin(new TMessage("Del", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Provide_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Provide_args args = new Provide_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Provide_result result = new Provide_result();
        result.Success = iface_.Provide(args.VssInfo, args.FileID, args.ListFriendId, args.ProvideName);
        oprot.WriteMessageBegin(new TMessage("Provide", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Recover_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Recover_args args = new Recover_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Recover_result result = new Recover_result();
        result.Success = iface_.Recover(args.VssInfo, args.FileID, args.ListFriendId);
        oprot.WriteMessageBegin(new TMessage("Recover", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFileTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFileTree_args args = new GetFileTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFileTree_result result = new GetFileTree_result();
        result.Success = iface_.GetFileTree(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetFileTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SaveFileTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SaveFileTree_args args = new SaveFileTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SaveFileTree_result result = new SaveFileTree_result();
        result.Success = iface_.SaveFileTree(args.VssInfo, args.FileTree);
        oprot.WriteMessageBegin(new TMessage("SaveFileTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriend_args args = new GetFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriend_result result = new GetFriend_result();
        result.Success = iface_.GetFriend(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetFriend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFollow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFollow_args args = new GetFollow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFollow_result result = new GetFollow_result();
        result.Success = iface_.GetFollow(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetFollow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFocus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFocus_args args = new GetFocus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFocus_result result = new GetFocus_result();
        result.Success = iface_.GetFocus(args.VssInfo);
        oprot.WriteMessageBegin(new TMessage("GetFocus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DelFocus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DelFocus_args args = new DelFocus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DelFocus_result result = new DelFocus_result();
        result.Success = iface_.DelFocus(args.VssInfo, args.DelFriends);
        oprot.WriteMessageBegin(new TMessage("DelFocus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddFocus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddFocus_args args = new AddFocus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddFocus_result result = new AddFocus_result();
        result.Success = iface_.AddFocus(args.VssInfo, args.AddFriends);
        oprot.WriteMessageBegin(new TMessage("AddFocus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriendMessage_args args = new GetFriendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriendMessage_result result = new GetFriendMessage_result();
        result.Success = iface_.GetFriendMessage(args.VssInfo, args.MaxMessage);
        oprot.WriteMessageBegin(new TMessage("GetFriendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DelFriendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DelFriendMessage_args args = new DelFriendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DelFriendMessage_result result = new DelFriendMessage_result();
        result.Success = iface_.DelFriendMessage(args.VssInfo, args.MessageID);
        oprot.WriteMessageBegin(new TMessage("DelFriendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMyOwnerFile_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetMyOwnerFile_args() {
      }

      public GetMyOwnerFile_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMyOwnerFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMyOwnerFile_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMyOwnerFile_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMyOwnerFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2 = null;
                    _elem2 = iprot.ReadString();
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMyOwnerFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter3 in Success)
              {
                oprot.WriteString(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMyOwnerFile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNumber_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetNumber_args() {
      }

      public GetNumber_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNumber_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNumber_result : TBase
    {
      private TNumber _success;

      public TNumber Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TNumber();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNumber_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAppUserInfo_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetAppUserInfo_args() {
      }

      public GetAppUserInfo_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAppUserInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAppUserInfo_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAppUserInfo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAppUserInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAppUserInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAppUserInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PutAppUserInfo_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string UserInfo { get; set; }

      public PutAppUserInfo_args() {
      }

      public PutAppUserInfo_args(TValidator vssInfo, string userInfo) : this() {
        this.VssInfo = vssInfo;
        this.UserInfo = userInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_userInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserInfo = iprot.ReadString();
                isset_userInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_userInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PutAppUserInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "userInfo";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserInfo);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PutAppUserInfo_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", UserInfo: ");
        __sb.Append(UserInfo);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PutAppUserInfo_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PutAppUserInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PutAppUserInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PutAppUserInfo_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileProvideList_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string FileID { get; set; }

      public GetFileProvideList_args() {
      }

      public GetFileProvideList_args(TValidator vssInfo, string fileID) : this() {
        this.VssInfo = vssInfo;
        this.FileID = fileID;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileID = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileID = iprot.ReadString();
                isset_fileID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFileProvideList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileID);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileProvideList_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileID: ");
        __sb.Append(FileID);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileProvideList_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFileProvideList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    string _elem6 = null;
                    _elem6 = iprot.ReadString();
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFileProvideList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter7 in Success)
              {
                oprot.WriteString(_iter7);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileProvideList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvideItems_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public int MaxMessage { get; set; }

      public GetProvideItems_args() {
      }

      public GetProvideItems_args(TValidator vssInfo, int MaxMessage) : this() {
        this.VssInfo = vssInfo;
        this.MaxMessage = MaxMessage;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_MaxMessage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MaxMessage = iprot.ReadI32();
                isset_MaxMessage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MaxMessage)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetProvideItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "MaxMessage";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMessage);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvideItems_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", MaxMessage: ");
        __sb.Append(MaxMessage);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvideItems_result : TBase
    {
      private List<TMessages> _success;

      public List<TMessages> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetProvideItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessages>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    TMessages _elem10 = new TMessages();
                    _elem10 = new TMessages();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetProvideItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessages _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvideItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvideMessage_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public int MaxMessage { get; set; }

      public GetProvideMessage_args() {
      }

      public GetProvideMessage_args(TValidator vssInfo, int MaxMessage) : this() {
        this.VssInfo = vssInfo;
        this.MaxMessage = MaxMessage;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_MaxMessage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MaxMessage = iprot.ReadI32();
                isset_MaxMessage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MaxMessage)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetProvideMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "MaxMessage";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMessage);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvideMessage_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", MaxMessage: ");
        __sb.Append(MaxMessage);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvideMessage_result : TBase
    {
      private List<TMessages> _success;

      public List<TMessages> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetProvideMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessages>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    TMessages _elem14 = new TMessages();
                    _elem14 = new TMessages();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetProvideMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessages _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvideMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPublishMessage_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public List<string> VssIDList { get; set; }

      public int MaxMessage { get; set; }

      public GetPublishMessage_args() {
      }

      public GetPublishMessage_args(TValidator vssInfo, List<string> vssIDList, int MaxMessage) : this() {
        this.VssInfo = vssInfo;
        this.VssIDList = vssIDList;
        this.MaxMessage = MaxMessage;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_vssIDList = false;
        bool isset_MaxMessage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  VssIDList = new List<string>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18 = null;
                    _elem18 = iprot.ReadString();
                    VssIDList.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
                isset_vssIDList = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MaxMessage = iprot.ReadI32();
                isset_MaxMessage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_vssIDList)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MaxMessage)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPublishMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "vssIDList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, VssIDList.Count));
          foreach (string _iter19 in VssIDList)
          {
            oprot.WriteString(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "MaxMessage";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMessage);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPublishMessage_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", VssIDList: ");
        __sb.Append(VssIDList);
        __sb.Append(", MaxMessage: ");
        __sb.Append(MaxMessage);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPublishMessage_result : TBase
    {
      private List<TMessages> _success;

      public List<TMessages> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPublishMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessages>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    TMessages _elem22 = new TMessages();
                    _elem22 = new TMessages();
                    _elem22.Read(iprot);
                    Success.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPublishMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessages _iter23 in Success)
              {
                _iter23.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPublishMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public Login_args() {
      }

      public Login_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_result : TBase
    {
      private TLoginResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TLoginResult"/>
      /// </summary>
      public TLoginResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TLoginResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Regist_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public Regist_args() {
      }

      public Regist_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Regist_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Regist_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Regist_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Regist_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Regist_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Regist_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Put_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public TFile FileItem { get; set; }

      public Put_args() {
      }

      public Put_args(TValidator vssInfo, TFile fileItem) : this() {
        this.VssInfo = vssInfo;
        this.FileItem = fileItem;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileItem = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                FileItem = new TFile();
                FileItem.Read(iprot);
                isset_fileItem = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileItem)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Put_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileItem";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        FileItem.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Put_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileItem: ");
        __sb.Append(FileItem== null ? "<null>" : FileItem.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Put_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Put_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Put_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Put_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Get_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string Fid { get; set; }

      public Get_args() {
      }

      public Get_args(TValidator vssInfo, string Fid) : this() {
        this.VssInfo = vssInfo;
        this.Fid = Fid;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_Fid = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Fid = iprot.ReadString();
                isset_Fid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_Fid)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "Fid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fid);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Get_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", Fid: ");
        __sb.Append(Fid);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Get_result : TBase
    {
      private TFile _success;

      public TFile Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TFile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Get_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Del_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string FileID { get; set; }

      public Del_args() {
      }

      public Del_args(TValidator vssInfo, string fileID) : this() {
        this.VssInfo = vssInfo;
        this.FileID = fileID;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileID = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileID = iprot.ReadString();
                isset_fileID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Del_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileID);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Del_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileID: ");
        __sb.Append(FileID);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Del_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Del_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Del_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Del_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Provide_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string FileID { get; set; }

      public List<string> ListFriendId { get; set; }

      public string ProvideName { get; set; }

      public Provide_args() {
      }

      public Provide_args(TValidator vssInfo, string fileID, List<string> listFriendId, string ProvideName) : this() {
        this.VssInfo = vssInfo;
        this.FileID = fileID;
        this.ListFriendId = listFriendId;
        this.ProvideName = ProvideName;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileID = false;
        bool isset_listFriendId = false;
        bool isset_ProvideName = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileID = iprot.ReadString();
                isset_fileID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ListFriendId = new List<string>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26 = null;
                    _elem26 = iprot.ReadString();
                    ListFriendId.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
                isset_listFriendId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ProvideName = iprot.ReadString();
                isset_ProvideName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_listFriendId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ProvideName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Provide_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileID);
        oprot.WriteFieldEnd();
        field.Name = "listFriendId";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ListFriendId.Count));
          foreach (string _iter27 in ListFriendId)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "ProvideName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProvideName);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Provide_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileID: ");
        __sb.Append(FileID);
        __sb.Append(", ListFriendId: ");
        __sb.Append(ListFriendId);
        __sb.Append(", ProvideName: ");
        __sb.Append(ProvideName);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Provide_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Provide_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Provide_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Provide_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Recover_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string FileID { get; set; }

      public List<string> ListFriendId { get; set; }

      public Recover_args() {
      }

      public Recover_args(TValidator vssInfo, string fileID, List<string> listFriendId) : this() {
        this.VssInfo = vssInfo;
        this.FileID = fileID;
        this.ListFriendId = listFriendId;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileID = false;
        bool isset_listFriendId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileID = iprot.ReadString();
                isset_fileID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ListFriendId = new List<string>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    string _elem30 = null;
                    _elem30 = iprot.ReadString();
                    ListFriendId.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
                isset_listFriendId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_listFriendId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Recover_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileID);
        oprot.WriteFieldEnd();
        field.Name = "listFriendId";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ListFriendId.Count));
          foreach (string _iter31 in ListFriendId)
          {
            oprot.WriteString(_iter31);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Recover_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileID: ");
        __sb.Append(FileID);
        __sb.Append(", ListFriendId: ");
        __sb.Append(ListFriendId);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Recover_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Recover_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Recover_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Recover_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileTree_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetFileTree_args() {
      }

      public GetFileTree_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFileTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileTree_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileTree_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFileTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFileTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileTree_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveFileTree_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string FileTree { get; set; }

      public SaveFileTree_args() {
      }

      public SaveFileTree_args(TValidator vssInfo, string fileTree) : this() {
        this.VssInfo = vssInfo;
        this.FileTree = fileTree;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_fileTree = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileTree = iprot.ReadString();
                isset_fileTree = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_fileTree)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SaveFileTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "fileTree";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileTree);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveFileTree_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", FileTree: ");
        __sb.Append(FileTree);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveFileTree_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SaveFileTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SaveFileTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveFileTree_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriend_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetFriend_args() {
      }

      public GetFriend_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFriend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriend_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriend_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    string _elem34 = null;
                    _elem34 = iprot.ReadString();
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFriend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter35 in Success)
              {
                oprot.WriteString(_iter35);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriend_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollow_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetFollow_args() {
      }

      public GetFollow_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFollow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollow_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollow_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFollow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    string _elem38 = null;
                    _elem38 = iprot.ReadString();
                    Success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFollow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter39 in Success)
              {
                oprot.WriteString(_iter39);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollow_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFocus_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public GetFocus_args() {
      }

      public GetFocus_args(TValidator vssInfo) : this() {
        this.VssInfo = vssInfo;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFocus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFocus_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFocus_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFocus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    string _elem42 = null;
                    _elem42 = iprot.ReadString();
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFocus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter43 in Success)
              {
                oprot.WriteString(_iter43);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFocus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelFocus_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public List<string> DelFriends { get; set; }

      public DelFocus_args() {
      }

      public DelFocus_args(TValidator vssInfo, List<string> delFriends) : this() {
        this.VssInfo = vssInfo;
        this.DelFriends = delFriends;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_delFriends = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  DelFriends = new List<string>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    string _elem46 = null;
                    _elem46 = iprot.ReadString();
                    DelFriends.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
                isset_delFriends = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_delFriends)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelFocus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "delFriends";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, DelFriends.Count));
          foreach (string _iter47 in DelFriends)
          {
            oprot.WriteString(_iter47);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelFocus_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", DelFriends: ");
        __sb.Append(DelFriends);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelFocus_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DelFocus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelFocus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelFocus_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddFocus_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public List<string> AddFriends { get; set; }

      public AddFocus_args() {
      }

      public AddFocus_args(TValidator vssInfo, List<string> addFriends) : this() {
        this.VssInfo = vssInfo;
        this.AddFriends = addFriends;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_addFriends = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  AddFriends = new List<string>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    string _elem50 = null;
                    _elem50 = iprot.ReadString();
                    AddFriends.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
                isset_addFriends = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_addFriends)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddFocus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "addFriends";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, AddFriends.Count));
          foreach (string _iter51 in AddFriends)
          {
            oprot.WriteString(_iter51);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddFocus_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", AddFriends: ");
        __sb.Append(AddFriends);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddFocus_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddFocus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddFocus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddFocus_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendMessage_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public int MaxMessage { get; set; }

      public GetFriendMessage_args() {
      }

      public GetFriendMessage_args(TValidator vssInfo, int MaxMessage) : this() {
        this.VssInfo = vssInfo;
        this.MaxMessage = MaxMessage;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_MaxMessage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MaxMessage = iprot.ReadI32();
                isset_MaxMessage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MaxMessage)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFriendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "MaxMessage";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMessage);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendMessage_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", MaxMessage: ");
        __sb.Append(MaxMessage);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendMessage_result : TBase
    {
      private List<TFriendMessage> _success;

      public List<TFriendMessage> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TFriendMessage>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    TFriendMessage _elem54 = new TFriendMessage();
                    _elem54 = new TFriendMessage();
                    _elem54.Read(iprot);
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFriendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TFriendMessage _iter55 in Success)
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelFriendMessage_args : TBase
    {

      public TValidator VssInfo { get; set; }

      public string MessageID { get; set; }

      public DelFriendMessage_args() {
      }

      public DelFriendMessage_args(TValidator vssInfo, string MessageID) : this() {
        this.VssInfo = vssInfo;
        this.MessageID = MessageID;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_vssInfo = false;
        bool isset_MessageID = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                VssInfo = new TValidator();
                VssInfo.Read(iprot);
                isset_vssInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageID = iprot.ReadString();
                isset_MessageID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_vssInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MessageID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelFriendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "vssInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        VssInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "MessageID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MessageID);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelFriendMessage_args(");
        __sb.Append(", VssInfo: ");
        __sb.Append(VssInfo== null ? "<null>" : VssInfo.ToString());
        __sb.Append(", MessageID: ");
        __sb.Append(MessageID);
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelFriendMessage_result : TBase
    {
      private TCommandResult _success;

      /// <summary>
      /// 
      /// <seealso cref="TCommandResult"/>
      /// </summary>
      public TCommandResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DelFriendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TCommandResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelFriendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelFriendMessage_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}

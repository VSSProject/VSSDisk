/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Vss
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TNumber : TBase
  {

    public int ProvideNum { get; set; }

    public int PublishNum { get; set; }

    public int FriendNum { get; set; }

    public int FocusNum { get; set; }

    public int FollowNum { get; set; }

    public int FriendMsgNum { get; set; }

    public int ProvideMsgNum { get; set; }

    public int FocusMsgNum { get; set; }

    public TNumber() {
    }

    public TNumber(int ProvideNum, int PublishNum, int FriendNum, int FocusNum, int FollowNum, int FriendMsgNum, int ProvideMsgNum, int FocusMsgNum) : this() {
      this.ProvideNum = ProvideNum;
      this.PublishNum = PublishNum;
      this.FriendNum = FriendNum;
      this.FocusNum = FocusNum;
      this.FollowNum = FollowNum;
      this.FriendMsgNum = FriendMsgNum;
      this.ProvideMsgNum = ProvideMsgNum;
      this.FocusMsgNum = FocusMsgNum;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_ProvideNum = false;
      bool isset_PublishNum = false;
      bool isset_FriendNum = false;
      bool isset_FocusNum = false;
      bool isset_FollowNum = false;
      bool isset_FriendMsgNum = false;
      bool isset_ProvideMsgNum = false;
      bool isset_FocusMsgNum = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ProvideNum = iprot.ReadI32();
              isset_ProvideNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              PublishNum = iprot.ReadI32();
              isset_PublishNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              FriendNum = iprot.ReadI32();
              isset_FriendNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              FocusNum = iprot.ReadI32();
              isset_FocusNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              FollowNum = iprot.ReadI32();
              isset_FollowNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              FriendMsgNum = iprot.ReadI32();
              isset_FriendMsgNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ProvideMsgNum = iprot.ReadI32();
              isset_ProvideMsgNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              FocusMsgNum = iprot.ReadI32();
              isset_FocusMsgNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_ProvideNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_PublishNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FriendNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FocusNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FollowNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FriendMsgNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ProvideMsgNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_FocusMsgNum)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TNumber");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "ProvideNum";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(ProvideNum);
      oprot.WriteFieldEnd();
      field.Name = "PublishNum";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(PublishNum);
      oprot.WriteFieldEnd();
      field.Name = "FriendNum";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(FriendNum);
      oprot.WriteFieldEnd();
      field.Name = "FocusNum";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(FocusNum);
      oprot.WriteFieldEnd();
      field.Name = "FollowNum";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(FollowNum);
      oprot.WriteFieldEnd();
      field.Name = "FriendMsgNum";
      field.Type = TType.I32;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(FriendMsgNum);
      oprot.WriteFieldEnd();
      field.Name = "ProvideMsgNum";
      field.Type = TType.I32;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(ProvideMsgNum);
      oprot.WriteFieldEnd();
      field.Name = "FocusMsgNum";
      field.Type = TType.I32;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(FocusMsgNum);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TNumber(");
      __sb.Append(", ProvideNum: ");
      __sb.Append(ProvideNum);
      __sb.Append(", PublishNum: ");
      __sb.Append(PublishNum);
      __sb.Append(", FriendNum: ");
      __sb.Append(FriendNum);
      __sb.Append(", FocusNum: ");
      __sb.Append(FocusNum);
      __sb.Append(", FollowNum: ");
      __sb.Append(FollowNum);
      __sb.Append(", FriendMsgNum: ");
      __sb.Append(FriendMsgNum);
      __sb.Append(", ProvideMsgNum: ");
      __sb.Append(ProvideMsgNum);
      __sb.Append(", FocusMsgNum: ");
      __sb.Append(FocusMsgNum);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
